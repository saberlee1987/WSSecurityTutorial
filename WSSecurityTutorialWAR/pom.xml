<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example.security</groupId>
	<artifactId>WSSecurityTutorialWAR</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>${project.artifactId}</name>
	<description>
		This module, packaged as a WAR, contains the core of our implementation of the service.  This pom file will
		accept the standard maven commands, and contains configurations for a couple of more plugins and profiles:
		
		Running 'mvn clean install -Pintegration-test' will start the tomcat server and run the remote intergration tests.
		
		Running 'mvn cargo:start' will start the tomcat server and leave it running until the user types "Ctrl-C", so that
		tests can be run in a separate tool (say, Eclipse), or other testing may be performed against the running service.
		
		The end result war is configured by various files through spring, using an extension of Spring's property placeholder
		functionality which will if necessary read properties from system property or JNDI env values.  There are three tiers
		of property configuration files:  a default one, a deployment one, and a test one.  The intent is for the default one
		(in src/main/resources) to be rolled into the WAR, and for the deployment one to be modified and deployed to the
		deployment server's file system, and its location specified via a system property or JNDI value.
		
		Various other files are present here, including the basic Spring configuration files, logback configuration files
		for SLF4J (which is used in these examples to override both log4j and commons-logging in all dependencies), and
		configuration files for CXF (META-INF/cxf/org.apache.cxf.Logger) which force CXF to use SLF4J as well.
		
		The configuration directories also include the necessary keystores; obviously you would want to specify your own keys
		and keystores for a real deployment.
		
		The tests use TestNG for its grouping functionality, and the "integration-test" profile executes the "remote-integration"
		group, while the normal test runs include only the "unit" and "local-integration" groups.  These tests use the CXF client
		functionality and have their own Spring configuration, and they serve as an example of how to build a CXF client
		for this kind of service.
	</description>
	<inceptionYear>2011</inceptionYear>
	
	<parent>
		<groupId>com.example.security</groupId>
		<artifactId>WSSecurityTutorialParent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../WSSecurityTutorialParent</relativePath>
	</parent>

	<properties>
		<port>8080</port>
		<apjPort>8010</apjPort>
		<stopPort>9977</stopPort>
		<containerId>tomcat7x</containerId>
		<downloadUrl>http://mirrors.ibiblio.org/apache/tomcat/tomcat-7/v7.0.14/bin/apache-tomcat-7.0.14.zip</downloadUrl>
		<installDir>${user.home}/.m2/tomcatm2</installDir>
		<waitForCargo>true</waitForCargo>

		<serverKeyAlias>myservicekey</serverKeyAlias>
		<testEndpointUrl>http://localhost:${port}/${project.artifactId}/jaxws/TutorialWebService</testEndpointUrl>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-servlet_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-ext</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.cal10n</groupId>
			<artifactId>cal10n-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-asm</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>WSSecurityTutorialJaxWs</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>WSSecurityTutorialWSDL</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/*.jks</exclude>
				</excludes>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.jks</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/main/springconfig/local</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>**/*.jks</exclude>
				</excludes>
			</testResource>
			<testResource>
				<directory>src/main/springconfig/local</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.jks</include>
				</includes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-wsdl</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>WSSecurityTutorialWSDL</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/wsdl-resources/WEB-INF/wsdl/</outputDirectory>
								</artifactItem>
							</artifactItems>
							<includes>**.xsd,**.wsdl</includes>
							<excludes>META-INF\/**</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webResources>
						<resource>
							<directory>${basedir}/target/wsdl-resources/</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<configuration>
					<wait>${waitForCargo}</wait>
					<container>
						<containerId>${containerId}</containerId>
						<type>installed</type>
						<zipUrlInstaller>
							<url>${downloadUrl}</url>
							<installDir>${installDir}</installDir>
						</zipUrlInstaller>
						<systemProperties>
							<configDirectory>${basedir}/target/test-classes</configDirectory>
						</systemProperties>
					</container>
					<configuration>
						<home>${project.build.directory}/${containerId}/container</home>
						<properties>
							<cargo.servlet.port>${port}</cargo.servlet.port>
							<cargo.logging>medium</cargo.logging>
							<cargo.servlet.users>admin::manager</cargo.servlet.users>
							<cargo.tomcat.ajp.port>${apjPort}</cargo.tomcat.ajp.port>
							<cargo.rmi.port>${stopPort}</cargo.rmi.port>
							<cargo.jvmargs>-Xmx1024m -XX:MaxPermSize=256m -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n</cargo.jvmargs>
						</properties>
						<deployables>
							<deployable>
								<groupId>${project.groupId}</groupId>
								<artifactId>${project.artifactId}</artifactId>
								<pingURL>http://localhost:${port}/${project.artifactId}/index.jsp</pingURL>
								<pingTimeout>60000</pingTimeout>
								<properties>
									<context>${project.artifactId}</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<profiles>
		<profile>
			<id>integration-test</id>
			<properties>
				<waitForCargo>false</waitForCargo>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<configuration>
								<deployables>
									<deployable>
										<groupId>${project.groupId}</groupId>
										<artifactId>${project.artifactId}</artifactId>
										<pingURL>http://localhost:${port}/${project.artifactId}/index.jsp</pingURL>
										<pingTimeout>60000</pingTimeout>
										<properties>
											<context>${project.artifactId}</context>
										</properties>
									</deployable>
								</deployables>
							</configuration>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<executions>
							<execution>
								<id>surefire-integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<groups>remote-integration</groups>
									<reportsDirectory>${basedir}/target/remote-surefire-reports/</reportsDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
